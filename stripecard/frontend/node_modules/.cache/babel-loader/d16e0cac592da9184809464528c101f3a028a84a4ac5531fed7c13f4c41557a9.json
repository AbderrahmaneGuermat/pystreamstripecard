{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Equipo\\\\OneDrive\\\\Bussines\\\\AI-CONTENT\\\\Mine\\\\app\\\\components\\\\template - card\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useElements } from '@stripe/react-stripe-js';\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\n\n// Define props para CheckoutForm para manejar la clave pública de Stripe\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Componente CheckoutForm para manejar la entrada del formulario de pago\nconst CheckoutForm = ({\n  stripe,\n  stripePublicKey\n}) => {\n  _s();\n  //const [stripe, setStripe] = useState<Stripe | null>(null);\n  const elements = useElements();\n  const [message, setMessage] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [cardError, setCardError] = useState('');\n  const [email, setEmail] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [postalCode, setPostalCode] = useState(\"\");\n\n  // Carga Stripe cuando stripePublicKey cambia\n  /* useEffect(() => {\r\n     if (stripePublicKey) {\r\n       loadStripe(stripePublicKey).then(stripeInstance => {\r\n         setStripe(stripeInstance);\r\n       });\r\n     }\r\n   }, [stripePublicKey]);\r\n  */\n  // Estilos para el CardElement y el botón\n  const cardElementStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#aab7c4\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  const formStyle = {\n    padding: \"20px\",\n    margin: \"0 auto\",\n    maxWidth: \"500px\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"5px\",\n    boxShadow: \"0 2px 3px rgba(0,0,0,0.1)\"\n  };\n  const buttonStyle = {\n    background: \"#5469d4\",\n    color: \"#ffffff\",\n    padding: \"8px 12px\",\n    border: \"none\",\n    borderRadius: \"4px\",\n    cursor: \"pointer\",\n    fontSize: \"16px\",\n    marginTop: \"20px\"\n  };\n  // Maneja la presentación del formulario\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!stripe || !elements) {\n      console.log(\"Stripe.js aún no ha cargado.\");\n      return;\n    }\n    if (!name || !lastName || !phone || !address) {\n      setMessage(\"Todos los campos son obligatorios\");\n      return;\n    }\n    const cardElement = elements.getElement(CardElement);\n    if (cardElement) {\n      const {\n        error,\n        paymentMethod\n      } = await stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details: {\n          name: `${name} ${lastName}`,\n          email: email,\n          // Utiliza el email recogido\n          phone: phone,\n          address: {\n            line1: address,\n            // Dirección completa\n            city: city,\n            country: country,\n            postal_code: postalCode // Código postal recogido\n          }\n          // Aquí puedes incluir detalles adicionales como email, phone, etc.\n        }\n      });\n      if (error) {\n        if (error.message !== undefined) {\n          setCardError(error.message);\n        } else {\n          setCardError(\"createPaymentMethod Ocurrió un error desconocido en paymentmethod.\");\n        }\n      } else {\n        setCardError(''); // Limpiar errores previos\n        console.log('createPaymentMethod PaymentMethod', paymentMethod);\n        console.log('PaymentMethod creado con éxito:', paymentMethod.id);\n        Streamlit.setComponentValue({\n          token: paymentMethod.id,\n          message: \"createPaymentMethod Pago en proceso: conectando con el setrvidor de pago\"\n        });\n\n        // Procesar el pago aquí\n      }\n\n      /*** \r\n      const result = await stripe.createToken(cardElement);\r\n        if (result.error) {\r\n        console.log(result.error.message);\r\n        setMessage(result.error.message || \"createToken Ocurrio un error desconocido en create token.\");\r\n        Streamlit.setComponentValue({ token: null, message: \"createToken Ocurrio un error desconocido\" });\r\n      } else {\r\n        console.log(\"Token generado: \" + result.token.id);\r\n        setMessage(\"Pago exitoso\"); //result.token.id\r\n        Streamlit.setComponentValue({ token: result.token.id, message: \"createToken Pago en proceso: conectando con el setrvidor de pago\" });\r\n      }\r\n      ***/\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    style: formStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: name,\n      onChange: e => setName(e.target.value),\n      placeholder: \"Nombre\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: lastName,\n      onChange: e => setLastName(e.target.value),\n      placeholder: \"Apellidos\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"tel\",\n      value: phone,\n      onChange: e => setPhone(e.target.value),\n      placeholder: \"Tel\\xE9fono\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: address,\n      onChange: e => setAddress(e.target.value),\n      placeholder: \"Direcci\\xF3n\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      value: email,\n      onChange: e => setEmail(e.target.value),\n      placeholder: \"Correo electr\\xF3nico\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: city,\n      onChange: e => setCity(e.target.value),\n      placeholder: \"Ciudad\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: country,\n      onChange: e => setCountry(e.target.value),\n      placeholder: \"Pa\\xEDs\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: postalCode,\n      onChange: e => setPostalCode(e.target.value),\n      placeholder: \"C\\xF3digo Postal\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {\n      options: cardElementStyle,\n      onChange: event => {\n        if (event.error) {\n          setCardError(event.error.message);\n        } else {\n          setCardError(''); // Limpiar errores si el usuario corrige el error en el CardElement\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      style: buttonStyle,\n      children: \"Pagar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [message, \"   \", cardError && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: cardError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n\n// Componente principal que integra el formulario en un componente de Streamlit\n_s(CheckoutForm, \"cbbJo9vrC105UX6UQAwpVmxvJ+U=\", false, function () {\n  return [useElements];\n});\n_c = CheckoutForm;\nclass MyStripeComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      stripe: null\n    };\n    this.render = () => {\n      const {\n        stripe\n      } = this.state;\n      // Recupera la clave pública de Stripe pasada desde Python a través de las props\n      const stripePublicKey = this.props.args[\"stripe_public_key\"];\n      // Inicializa Stripe aquí. `loadStripe` devuelve una promesa que resuelve a un objeto Stripe o null, lo que es aceptable para `Elements`.\n      //const stripePromise = loadStripe(stripePublicKey);\n      return /*#__PURE__*/_jsxDEV(Elements, {\n        stripe: stripe,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: stripePublicKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), stripe && /*#__PURE__*/_jsxDEV(CheckoutForm, {\n          stripe: stripe,\n          stripePublicKey: stripePublicKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  componentDidMount() {\n    const {\n      stripe_public_key: stripePublicKey\n    } = this.props.args;\n    loadStripe(stripePublicKey).then(stripe => this.setState({\n      stripe\n    }));\n  }\n}\n\n// Envuelve MyStripeComponent con withStreamlitConnection para la integración con Streamlit\nexport default _c2 = withStreamlitConnection(MyStripeComponent);\nvar _c, _c2;\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","loadStripe","Elements","CardElement","useElements","Streamlit","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","CheckoutForm","stripe","stripePublicKey","_s","elements","message","setMessage","name","setName","lastName","setLastName","phone","setPhone","address","setAddress","cardError","setCardError","email","setEmail","city","setCity","country","setCountry","postalCode","setPostalCode","cardElementStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","formStyle","padding","margin","maxWidth","border","borderRadius","boxShadow","buttonStyle","background","cursor","marginTop","handleSubmit","event","preventDefault","console","log","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","billing_details","line1","postal_code","undefined","id","setComponentValue","token","onSubmit","children","value","onChange","e","target","placeholder","required","fileName","_jsxFileName","lineNumber","columnNumber","options","disabled","_c","MyStripeComponent","constructor","args","state","render","props","componentDidMount","stripe_public_key","then","setState","_c2","$RefreshReg$"],"sources":["C:/Users/Equipo/OneDrive/Bussines/AI-CONTENT/Mine/app/components/template - card/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { loadStripe, Stripe, StripeElements } from '@stripe/stripe-js';\r\nimport { Elements, CardElement, useElements } from '@stripe/react-stripe-js';\r\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\r\n\r\n// Define props para CheckoutForm para manejar la clave pública de Stripe\r\ninterface CheckoutFormProps {\r\n  stripePublicKey: string;\r\n  stripe: Stripe | null;\r\n}\r\n\r\n\r\n\r\n// Componente CheckoutForm para manejar la entrada del formulario de pago\r\nconst CheckoutForm: React.FC<CheckoutFormProps> = ({ stripe,stripePublicKey }) => {\r\n  //const [stripe, setStripe] = useState<Stripe | null>(null);\r\n  const elements = useElements();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  const [cardError, setCardError] = useState('');\r\n  const [email, setEmail] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [postalCode, setPostalCode] = useState(\"\");\r\n\r\n\r\n  // Carga Stripe cuando stripePublicKey cambia\r\n /* useEffect(() => {\r\n    if (stripePublicKey) {\r\n      loadStripe(stripePublicKey).then(stripeInstance => {\r\n        setStripe(stripeInstance);\r\n      });\r\n    }\r\n  }, [stripePublicKey]);\r\n*/\r\n   // Estilos para el CardElement y el botón\r\n  const cardElementStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: 'Arial, sans-serif',\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": {\r\n          color: \"#aab7c4\"\r\n        },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\"\r\n      }\r\n    }\r\n  };\r\n\r\n  const formStyle = {\r\n    padding: \"20px\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"500px\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"5px\",\r\n    boxShadow: \"0 2px 3px rgba(0,0,0,0.1)\"\r\n  };\r\n\r\n  const buttonStyle = {\r\n    background: \"#5469d4\",\r\n    color: \"#ffffff\",\r\n    padding: \"8px 12px\",\r\n    border: \"none\",\r\n    borderRadius: \"4px\",\r\n    cursor: \"pointer\",\r\n    fontSize: \"16px\",\r\n    marginTop: \"20px\"\r\n  };\r\n  // Maneja la presentación del formulario\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      console.log(\"Stripe.js aún no ha cargado.\");\r\n      return;\r\n    }\r\n\r\n    if (!name || !lastName || !phone || !address) {\r\n      setMessage(\"Todos los campos son obligatorios\");\r\n      return;\r\n    }\r\n\r\n    const cardElement = elements.getElement(CardElement);\r\n    \r\n    \r\n\r\n\r\n\r\n    if (cardElement) {\r\n\r\n      const {error, paymentMethod} = await stripe.createPaymentMethod({\r\n        type: 'card',\r\n        card: cardElement,\r\n        billing_details: {\r\n          name: `${name} ${lastName}`,\r\n          email: email, // Utiliza el email recogido\r\n          phone: phone,\r\n          address: { \r\n            line1: address, // Dirección completa\r\n            city: city,\r\n            country: country,\r\n            postal_code: postalCode, // Código postal recogido\r\n          }\r\n          // Aquí puedes incluir detalles adicionales como email, phone, etc.\r\n        },\r\n      });\r\n  \r\n      if (error) {\r\n        if (error.message !== undefined) {\r\n          setCardError(error.message);\r\n        } else {\r\n          setCardError(\"createPaymentMethod Ocurrió un error desconocido en paymentmethod.\");\r\n        }\r\n      } else {\r\n        setCardError(''); // Limpiar errores previos\r\n        console.log('createPaymentMethod PaymentMethod', paymentMethod);\r\n        console.log('PaymentMethod creado con éxito:', paymentMethod.id);\r\n        Streamlit.setComponentValue({ token: paymentMethod.id, message: \"createPaymentMethod Pago en proceso: conectando con el setrvidor de pago\" });\r\n\r\n        // Procesar el pago aquí\r\n      }\r\n\r\n\r\n      /*** \r\n      const result = await stripe.createToken(cardElement);\r\n\r\n      if (result.error) {\r\n        console.log(result.error.message);\r\n        setMessage(result.error.message || \"createToken Ocurrio un error desconocido en create token.\");\r\n        Streamlit.setComponentValue({ token: null, message: \"createToken Ocurrio un error desconocido\" });\r\n      } else {\r\n        console.log(\"Token generado: \" + result.token.id);\r\n        setMessage(\"Pago exitoso\"); //result.token.id\r\n        Streamlit.setComponentValue({ token: result.token.id, message: \"createToken Pago en proceso: conectando con el setrvidor de pago\" });\r\n      }\r\n      ***/\r\n\r\n\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} style={formStyle}>\r\n      <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} placeholder=\"Nombre\" required />\r\n      <input type=\"text\" value={lastName} onChange={(e) => setLastName(e.target.value)} placeholder=\"Apellidos\" required />\r\n      <input type=\"tel\" value={phone} onChange={(e) => setPhone(e.target.value)} placeholder=\"Teléfono\" required />\r\n      <input type=\"text\" value={address} onChange={(e) => setAddress(e.target.value)} placeholder=\"Dirección\" required />\r\n      <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} placeholder=\"Correo electrónico\" required />\r\n      <input type=\"text\" value={city} onChange={(e) => setCity(e.target.value)} placeholder=\"Ciudad\" required />\r\n      <input type=\"text\" value={country} onChange={(e) => setCountry(e.target.value)} placeholder=\"País\" required />\r\n      <input type=\"text\" value={postalCode} onChange={(e) => setPostalCode(e.target.value)} placeholder=\"Código Postal\" required />\r\n\r\n      <CardElement options={cardElementStyle} onChange={(event) => {\r\n        if (event.error) {\r\n          setCardError(event.error.message);\r\n        } else {\r\n          setCardError(''); // Limpiar errores si el usuario corrige el error en el CardElement\r\n        }\r\n      }} />\r\n      <button type=\"submit\" disabled={!stripe} style={buttonStyle}>Pagar</button>\r\n      <div>{message}   {cardError && <div>{cardError}</div>}\r\n</div>\r\n      \r\n    </form>\r\n  );\r\n};\r\n\r\n// Componente principal que integra el formulario en un componente de Streamlit\r\nclass MyStripeComponent extends StreamlitComponentBase<any, any> {\r\n\r\n  state = {\r\n    stripe: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { stripe_public_key: stripePublicKey } = this.props.args;\r\n    loadStripe(stripePublicKey).then(stripe => this.setState({ stripe }));\r\n  }\r\n  public render = (): React.ReactNode => {\r\n    const { stripe } = this.state;\r\n    // Recupera la clave pública de Stripe pasada desde Python a través de las props\r\n    const stripePublicKey: string = this.props.args[\"stripe_public_key\"];\r\n    // Inicializa Stripe aquí. `loadStripe` devuelve una promesa que resuelve a un objeto Stripe o null, lo que es aceptable para `Elements`.\r\n    //const stripePromise = loadStripe(stripePublicKey);\r\n    return (\r\n      <Elements stripe={stripe}>\r\n          <div>{stripePublicKey}</div>\r\n         {stripe && <CheckoutForm stripe={stripe} stripePublicKey={stripePublicKey} />}\r\n      </Elements>\r\n    );\r\n  }\r\n}\r\n\r\n// Envuelve MyStripeComponent con withStreamlitConnection para la integración con Streamlit\r\nexport default withStreamlitConnection(MyStripeComponent);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}