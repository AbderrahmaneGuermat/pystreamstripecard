{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Equipo\\\\OneDrive\\\\Bussines\\\\AI-CONTENT\\\\Mine\\\\app\\\\components\\\\template - card\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useElements } from '@stripe/react-stripe-js';\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport Select from 'react-select';\nimport { countries } from 'countries-list';\nimport './FormStyles.css';\n\n// Define props para CheckoutForm para manejar la clave pública de Stripe\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst countryOptions = Object.keys(countries).map(code => ({\n  value: code,\n  label: countries[code].name\n}));\n\n// Componente CheckoutForm para manejar la entrada del formulario de pago\nconst CheckoutForm = ({\n  stripe,\n  stripePublicKey\n}) => {\n  _s();\n  //const [stripe, setStripe] = useState<Stripe | null>(null);\n  const elements = useElements();\n  const [message, setMessage] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [cardError, setCardError] = useState('');\n  const [email, setEmail] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [postalCode, setPostalCode] = useState(\"\");\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  // Estilos para el CardElement, inputs y botn\n  const cardElementStyle = {\n    style: {\n      base: {\n        color: \"#495057\",\n        fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#adb5bd\"\n        },\n        marginTop: \"20px\",\n        // Añade espacio por encima del elemento\n        marginBottom: \"20px\" // Añade espacio por debajo del elemento\n      },\n      invalid: {\n        color: \"#dc3545\",\n        iconColor: \"#dc3545\"\n      }\n    },\n    hidePostalCode: true\n  };\n  const formStyle = {\n    padding: \"30px\",\n    // Más espacio interior para un look más espacioso\n    margin: \"20px auto\",\n    // Aumento del margen para centrar mejor en la página\n    maxWidth: \"540px\",\n    // Un poco más ancho para formularios más complejos\n    border: \"1px solid #dee2e6\",\n    // Un gris más suave para el borde\n    borderRadius: \"0.375rem\",\n    // Bordes más redondeados para un look moderno\n    boxShadow: \"0 4px 6px rgba(0,0,0,0.1)\" // Sombra más suave y extendida para profundidad\n  };\n\n  // Estilo para inputs\n  const inputStyle = {\n    padding: \"10px 15px\",\n    fontSize: \"16px\",\n    border: \"1px solid #ddd\",\n    borderRadius: \"4px\",\n    outlineColor: \"#5469d4\",\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    // Esto asegura que TypeScript entienda el valor como un tipo válido.\n    marginTop: \"20px\" // Añade un margen superior al botón\n  };\n\n  // Estilo para el botón de submit\n  const submitButtonStyle = {\n    backgroundColor: \"#007bff\",\n    color: \"white\",\n    cursor: \"pointer\",\n    fontWeight: \"bold\",\n    border: \"none\",\n    transition: \"background-color 0.2s, box-shadow 0.2s\",\n    padding: \"12px 20px\",\n    fontSize: \"1rem\",\n    borderRadius: \"0.25rem\",\n    outlineColor: \"#495057\",\n    width: \"100%\",\n    marginTop: \"20px\" // Añade un margen superior al botón\n  };\n\n  // Maneja la presentación del formulario\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!stripe || !elements) {\n      console.log(\"Stripe.js aún no ha cargado.\");\n      return;\n    }\n    if (!name || !lastName || !phone || !address) {\n      setMessage(\"Todos los campos son obligatorios\");\n      return;\n    }\n    const cardElement = elements.getElement(CardElement);\n    if (cardElement) {\n      const {\n        error,\n        paymentMethod\n      } = await stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details: {\n          name: `${name} ${lastName}`,\n          email: email,\n          // Utiliza el email recogido\n          phone: phone,\n          address: {\n            line1: address,\n            // Dirección completa\n            city: city,\n            country: selectedCountry ? selectedCountry.value : '',\n            postal_code: postalCode // Código postal recogido\n          }\n        }\n      });\n      if (error) {\n        if (error.message !== undefined) {\n          setCardError(error.message);\n        } else {\n          setCardError(\"createPaymentMethod Ocurrió un error desconocido en paymentmethod.\");\n        }\n      } else {\n        setCardError(''); // Limpiar errores previos\n        console.log('createPaymentMethod PaymentMethod', paymentMethod);\n        console.log('PaymentMethod creado con éxito:', paymentMethod.id);\n        // Procesar el pago aquí\n        Streamlit.setComponentValue({\n          token: paymentMethod.id,\n          message: \"createPaymentMethod Pago en proceso: conectando con el setrvidor de pago\"\n        });\n      }\n      /*** \r\n      const result = await stripe.createToken(cardElement);\r\n        if (result.error) {\r\n        console.log(result.error.message);\r\n        setMessage(result.error.message || \"createToken Ocurrio un error desconocido en create token.\");\r\n        Streamlit.setComponentValue({ token: null, message: \"createToken Ocurrio un error desconocido\" });\r\n      } else {\r\n        console.log(\"Token generado: \" + result.token.id);\r\n        setMessage(\"Pago exitoso\"); //result.token.id\r\n        Streamlit.setComponentValue({ token: result.token.id, message: \"createToken Pago en proceso: conectando con el setrvidor de pago\" });\r\n      }\r\n      ***/\n    }\n  };\n  //<input type=\"text\" value={country} onChange={(e) => setCountry(e.target.value)} placeholder=\"País\" required />\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    style: formStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: name,\n      onChange: e => setName(e.target.value),\n      placeholder: \"Nombre\",\n      required: true,\n      style: inputStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: lastName,\n      onChange: e => setLastName(e.target.value),\n      placeholder: \"Apellidos\",\n      required: true,\n      style: inputStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"tel\",\n      value: phone,\n      onChange: e => setPhone(e.target.value),\n      placeholder: \"Tel\\xE9fono\",\n      required: true,\n      style: inputStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: address,\n      onChange: e => setAddress(e.target.value),\n      placeholder: \"Direcci\\xF3n\",\n      required: true,\n      style: inputStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      value: email,\n      onChange: e => setEmail(e.target.value),\n      placeholder: \"Correo electr\\xF3nico\",\n      required: true,\n      style: inputStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: city,\n      onChange: e => setCity(e.target.value),\n      placeholder: \"Ciudad\",\n      required: true,\n      style: inputStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: postalCode,\n      onChange: e => setPostalCode(e.target.value),\n      placeholder: \"C\\xF3digo Postal\",\n      required: true,\n      style: inputStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: countryOptions,\n      value: selectedCountry,\n      onChange: selectedOption => {\n        if (selectedOption !== null) {\n          setSelectedCountry(selectedOption);\n          setCountry(selectedOption.value);\n        } else {\n          // Manejar el caso en que no haya selección (opcional)\n          setSelectedCountry(null);\n          setCountry(\"\"); // O cualquier valor predeterminado o manejo de estado deseado\n        }\n      },\n      placeholder: \"Select your country\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {\n      options: cardElementStyle,\n      onChange: event => {\n        if (event.error) {\n          setCardError(event.error.message);\n        } else {\n          setCardError(''); // Limpiar errores si el usuario corrige el error en el CardElement\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      style: submitButtonStyle,\n      children: \"Pagar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [message, cardError && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: cardError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n\n// Componente principal que integra el formulario en un componente de Streamlit\n_s(CheckoutForm, \"vOMyorypFm20pa1Z3P8dyluGgMk=\", false, function () {\n  return [useElements];\n});\n_c = CheckoutForm;\nclass MyStripeComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      stripe: null\n    };\n    this.render = () => {\n      const {\n        stripe\n      } = this.state;\n      // Recupera la clave pública de Stripe pasada desde Python a través de las props\n      const stripePublicKey = this.props.args[\"stripe_public_key\"];\n      // Inicializa Stripe aquí. `loadStripe` devuelve una promesa que resuelve a un objeto Stripe o null, lo que es aceptable para `Elements`.\n      //const stripePromise = loadStripe(stripePublicKey);\n      return /*#__PURE__*/_jsxDEV(Elements, {\n        stripe: stripe,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: stripePublicKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), stripe && /*#__PURE__*/_jsxDEV(CheckoutForm, {\n          stripe: stripe,\n          stripePublicKey: stripePublicKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  componentDidMount() {\n    const {\n      stripe_public_key: stripePublicKey\n    } = this.props.args;\n    loadStripe(stripePublicKey).then(stripe => this.setState({\n      stripe\n    }));\n  }\n}\n\n// Envuelve MyStripeComponent con withStreamlitConnection para la integración con Streamlit\nexport default _c2 = withStreamlitConnection(MyStripeComponent);\nvar _c, _c2;\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","loadStripe","Elements","CardElement","useElements","Streamlit","StreamlitComponentBase","withStreamlitConnection","Select","countries","jsxDEV","_jsxDEV","countryOptions","Object","keys","map","code","value","label","name","CheckoutForm","stripe","stripePublicKey","_s","elements","message","setMessage","setName","lastName","setLastName","phone","setPhone","address","setAddress","cardError","setCardError","email","setEmail","city","setCity","country","setCountry","postalCode","setPostalCode","selectedCountry","setSelectedCountry","cardElementStyle","style","base","color","fontFamily","fontSmoothing","fontSize","marginTop","marginBottom","invalid","iconColor","hidePostalCode","formStyle","padding","margin","maxWidth","border","borderRadius","boxShadow","inputStyle","outlineColor","width","boxSizing","submitButtonStyle","backgroundColor","cursor","fontWeight","transition","handleSubmit","event","preventDefault","console","log","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","billing_details","line1","postal_code","undefined","id","setComponentValue","token","onSubmit","children","onChange","e","target","placeholder","required","fileName","_jsxFileName","lineNumber","columnNumber","options","selectedOption","disabled","_c","MyStripeComponent","constructor","args","state","render","props","componentDidMount","stripe_public_key","then","setState","_c2","$RefreshReg$"],"sources":["C:/Users/Equipo/OneDrive/Bussines/AI-CONTENT/Mine/app/components/template - card/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { loadStripe, Stripe, StripeElements } from '@stripe/stripe-js';\r\nimport { Elements, CardElement, useElements } from '@stripe/react-stripe-js';\r\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\r\nimport Select from 'react-select';\r\nimport { countries } from 'countries-list';\r\nimport './FormStyles.css';\r\n\r\n\r\n// Define props para CheckoutForm para manejar la clave pública de Stripe\r\ninterface CheckoutFormProps {\r\n  stripePublicKey: string;\r\n  stripe: Stripe | null;\r\n}\r\ninterface TCountries {\r\n  [code: string]: { name: string; }; // Asume que cada país tiene al menos un nombre.\r\n}\r\nconst countryOptions = Object.keys(countries).map((code) => ({\r\n  value: code,\r\n  label: (countries as TCountries)[code].name,\r\n}));\r\n\r\n// Componente CheckoutForm para manejar la entrada del formulario de pago\r\nconst CheckoutForm: React.FC<CheckoutFormProps> = ({ stripe,stripePublicKey }) => {\r\n  //const [stripe, setStripe] = useState<Stripe | null>(null);\r\n  const elements = useElements();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  const [cardError, setCardError] = useState('');\r\n  const [email, setEmail] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [postalCode, setPostalCode] = useState(\"\");\r\n  const [selectedCountry, setSelectedCountry] = useState<{ value: string; label: string; } | null>(null);\r\n\r\n\r\n   // Estilos para el CardElement, inputs y botn\r\n   const cardElementStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#495057\",\r\n        fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": {\r\n          color: \"#adb5bd\"\r\n        },\r\n        marginTop: \"20px\", // Añade espacio por encima del elemento\r\n        marginBottom: \"20px\", // Añade espacio por debajo del elemento\r\n      },\r\n      invalid: {\r\n        color: \"#dc3545\",\r\n        iconColor: \"#dc3545\"\r\n      }\r\n    },\r\n    hidePostalCode: true\r\n  };\r\n  \r\n  const formStyle = {\r\n    padding: \"30px\", // Más espacio interior para un look más espacioso\r\n    margin: \"20px auto\", // Aumento del margen para centrar mejor en la página\r\n    maxWidth: \"540px\", // Un poco más ancho para formularios más complejos\r\n    border: \"1px solid #dee2e6\", // Un gris más suave para el borde\r\n    borderRadius: \"0.375rem\", // Bordes más redondeados para un look moderno\r\n    boxShadow: \"0 4px 6px rgba(0,0,0,0.1)\" // Sombra más suave y extendida para profundidad\r\n  };\r\n  \r\n\r\n// Estilo para inputs\r\nconst inputStyle: React.CSSProperties = {\r\n  padding: \"10px 15px\",\r\n  fontSize: \"16px\",\r\n  border: \"1px solid #ddd\",\r\n  borderRadius: \"4px\",\r\n  outlineColor: \"#5469d4\",\r\n  width: \"100%\",\r\n  boxSizing: \"border-box\" as \"border-box\", // Esto asegura que TypeScript entienda el valor como un tipo válido.\r\n  marginTop: \"20px\", // Añade un margen superior al botón\r\n\r\n};\r\n\r\n\r\n// Estilo para el botón de submit\r\nconst submitButtonStyle = {\r\n  backgroundColor: \"#007bff\",\r\n  color: \"white\",\r\n  cursor: \"pointer\",\r\n  fontWeight: \"bold\",\r\n  border: \"none\",\r\n  transition: \"background-color 0.2s, box-shadow 0.2s\",\r\n  padding: \"12px 20px\",\r\n  fontSize: \"1rem\",\r\n  borderRadius: \"0.25rem\",\r\n  outlineColor: \"#495057\",\r\n  width: \"100%\",\r\n  marginTop: \"20px\", // Añade un margen superior al botón\r\n};\r\n\r\n\r\n\r\n  // Maneja la presentación del formulario\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      console.log(\"Stripe.js aún no ha cargado.\");\r\n      return;\r\n    }\r\n\r\n    if (!name || !lastName || !phone || !address) {\r\n      setMessage(\"Todos los campos son obligatorios\");\r\n      return;\r\n    }\r\n\r\n    const cardElement = elements.getElement(CardElement);\r\n    \r\n    \r\n    if (cardElement) {\r\n\r\n      const {error, paymentMethod} = await stripe.createPaymentMethod({\r\n        type: 'card',\r\n        card: cardElement,\r\n        billing_details: {\r\n          name: `${name} ${lastName}`,\r\n          email: email, // Utiliza el email recogido\r\n          phone: phone,\r\n          address: { \r\n            line1: address, // Dirección completa\r\n            city: city,\r\n            country: selectedCountry ? selectedCountry.value : '',\r\n            postal_code: postalCode, // Código postal recogido\r\n          }\r\n        },\r\n      });\r\n  \r\n      if (error) {\r\n        if (error.message !== undefined) {\r\n          setCardError(error.message);\r\n        } else {\r\n          setCardError(\"createPaymentMethod Ocurrió un error desconocido en paymentmethod.\");\r\n        }\r\n      } else {\r\n        setCardError(''); // Limpiar errores previos\r\n        console.log('createPaymentMethod PaymentMethod', paymentMethod);\r\n        console.log('PaymentMethod creado con éxito:', paymentMethod.id);\r\n        // Procesar el pago aquí\r\n        Streamlit.setComponentValue({ token: paymentMethod.id, message: \"createPaymentMethod Pago en proceso: conectando con el setrvidor de pago\" });\r\n      }\r\n      /*** \r\n      const result = await stripe.createToken(cardElement);\r\n\r\n      if (result.error) {\r\n        console.log(result.error.message);\r\n        setMessage(result.error.message || \"createToken Ocurrio un error desconocido en create token.\");\r\n        Streamlit.setComponentValue({ token: null, message: \"createToken Ocurrio un error desconocido\" });\r\n      } else {\r\n        console.log(\"Token generado: \" + result.token.id);\r\n        setMessage(\"Pago exitoso\"); //result.token.id\r\n        Streamlit.setComponentValue({ token: result.token.id, message: \"createToken Pago en proceso: conectando con el setrvidor de pago\" });\r\n      }\r\n      ***/\r\n    }\r\n  };\r\n  //<input type=\"text\" value={country} onChange={(e) => setCountry(e.target.value)} placeholder=\"País\" required />\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} style={formStyle}>\r\n      <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} placeholder=\"Nombre\" required style={inputStyle}/>\r\n      <input type=\"text\" value={lastName} onChange={(e) => setLastName(e.target.value)} placeholder=\"Apellidos\" required style={inputStyle}/>\r\n      <input type=\"tel\" value={phone} onChange={(e) => setPhone(e.target.value)} placeholder=\"Teléfono\" required style={inputStyle}/>\r\n      <input type=\"text\" value={address} onChange={(e) => setAddress(e.target.value)} placeholder=\"Dirección\" required style={inputStyle}/>\r\n      <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} placeholder=\"Correo electrónico\" required style={inputStyle}/>\r\n      <input type=\"text\" value={city} onChange={(e) => setCity(e.target.value)} placeholder=\"Ciudad\" required style={inputStyle}/>\r\n      <input type=\"text\" value={postalCode} onChange={(e) => setPostalCode(e.target.value)} placeholder=\"Código Postal\" required style={inputStyle}/>\r\n      <Select\r\n        options={countryOptions}\r\n        value={selectedCountry}\r\n        onChange={(selectedOption) => {\r\n          if (selectedOption !== null) {\r\n            setSelectedCountry(selectedOption);\r\n            setCountry(selectedOption.value);\r\n          } else {\r\n            // Manejar el caso en que no haya selección (opcional)\r\n            setSelectedCountry(null);\r\n            setCountry(\"\"); // O cualquier valor predeterminado o manejo de estado deseado\r\n          }\r\n        }}\r\n        placeholder=\"Select your country\"\r\n        required\r\n      />\r\n\r\n      <CardElement options={cardElementStyle} onChange={(event) => {\r\n        if (event.error) {\r\n          setCardError(event.error.message);\r\n        } else {\r\n          setCardError(''); // Limpiar errores si el usuario corrige el error en el CardElement\r\n        }\r\n      }} />\r\n      <button type=\"submit\" disabled={!stripe} style={submitButtonStyle}>Pagar</button>\r\n      <div>{message} \r\n      {cardError && \r\n      <div>{cardError}</div>}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\n// Componente principal que integra el formulario en un componente de Streamlit\r\nclass MyStripeComponent extends StreamlitComponentBase<any, any> {\r\n\r\n  state = {\r\n    stripe: null,\r\n  };\r\n  componentDidMount() {\r\n    const { stripe_public_key: stripePublicKey } = this.props.args;\r\n    loadStripe(stripePublicKey).then(stripe => this.setState({ stripe }));\r\n  }\r\n  public render = (): React.ReactNode => {\r\n    const { stripe } = this.state;\r\n    // Recupera la clave pública de Stripe pasada desde Python a través de las props\r\n    const stripePublicKey: string = this.props.args[\"stripe_public_key\"];\r\n    // Inicializa Stripe aquí. `loadStripe` devuelve una promesa que resuelve a un objeto Stripe o null, lo que es aceptable para `Elements`.\r\n    //const stripePromise = loadStripe(stripePublicKey);\r\n    return (\r\n      <Elements stripe={stripe}>\r\n          <div>{stripePublicKey}</div>\r\n         {stripe && <CheckoutForm stripe={stripe} stripePublicKey={stripePublicKey} />}\r\n      </Elements>\r\n    );\r\n  }\r\n}\r\n\r\n// Envuelve MyStripeComponent con withStreamlitConnection para la integración con Streamlit\r\nexport default withStreamlitConnection(MyStripeComponent);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}