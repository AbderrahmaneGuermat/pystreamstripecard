{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Equipo\\\\OneDrive\\\\Bussines\\\\AI-CONTENT\\\\Mine\\\\app\\\\components\\\\template - copia\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numClicks: 0,\n      isFocused: false,\n      text_devuelto: \"\",\n      numero_calculado: 0\n    };\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"];\n      const numeroenviado = this.props.args[\"numeroenviado\"];\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Hello, \", name, \"! \", numeroenviado, \" \\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: this.state.text_devuelto,\n          onChange: e => this.setState({\n            text_devuelto: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: style,\n          onClick: this.onClicked,\n          disabled: this.props.disabled,\n          onFocus: this._onFocus,\n          onBlur: this._onBlur,\n          children: \"Click Me!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this);\n    };\n    /** Click handler for our \"Click Me!\" button. */\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      const numero_inventado = 5;\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue({\n        numClicks: this.state.numClicks,\n        text_devuelto: `Processed: ${this.state.text_devuelto}`,\n        numero_calculado: numero_inventado\n      }));\n    };\n    /** Focus handler for our \"Click Me!\" button. */\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n    /** Blur handler for our \"Click Me!\" button. */\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","jsxDEV","_jsxDEV","MyComponent","constructor","args","state","numClicks","isFocused","text_devuelto","numero_calculado","render","name","props","numeroenviado","theme","style","borderStyling","primaryColor","border","outline","children","type","value","onChange","e","setState","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","numero_inventado","prevState","setComponentValue","_c","$RefreshReg$"],"sources":["C:/Users/Equipo/OneDrive/Bussines/AI-CONTENT/Mine/app/components/template - copia/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\n\r\ninterface State {\r\n  numClicks: number\r\n  isFocused: boolean\r\n  text_devuelto: string\r\n  numero_calculado: number\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass MyComponent extends StreamlitComponentBase<State> {\r\n  public state = { numClicks: 0, isFocused: false, text_devuelto: \"\", numero_calculado: 0 }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    const name = this.props.args[\"name\"]\r\n    const numeroenviado = this.props.args[\"numeroenviado\"]\r\n\r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    const style: React.CSSProperties = {}\r\n\r\n    // Maintain compatibility with older versions of Streamlit that don't send\r\n    // a theme object.\r\n    if (theme) {\r\n      // Use the theme object to style our button border. Alternatively, the\r\n      // theme style is defined in CSS vars.\r\n      const borderStyling = `1px solid ${\r\n        this.state.isFocused ? theme.primaryColor : \"gray\"\r\n      }`\r\n      style.border = borderStyling\r\n      style.outline = borderStyling\r\n    }\r\n\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n    return (\r\n      <span>\r\n        Hello, {name}! {numeroenviado} &nbsp;\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.text_devuelto}\r\n          onChange={e => this.setState({ text_devuelto: e.target.value })}\r\n        />\r\n        <button\r\n          style={style}\r\n          onClick={this.onClicked}\r\n          disabled={this.props.disabled}\r\n          onFocus={this._onFocus}\r\n          onBlur={this._onBlur}\r\n        >\r\n          Click Me!\r\n        </button>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  /** Click handler for our \"Click Me!\" button. */\r\n  private onClicked = (): void => {\r\n    // Increment state.numClicks, and pass the new value back to\r\n    // Streamlit via `Streamlit.setComponentValue`.\r\n    const numero_inventado = 5;\r\n    this.setState(\r\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\r\n      () => Streamlit.setComponentValue({\r\n        numClicks: this.state.numClicks,\r\n        text_devuelto: `Processed: ${this.state.text_devuelto}`,\r\n        numero_calculado: numero_inventado\r\n      })\r\n    )\r\n  }\r\n\r\n  /** Focus handler for our \"Click Me!\" button. */\r\n  private _onFocus = (): void => {\r\n    this.setState({ isFocused: true })\r\n  }\r\n\r\n  /** Blur handler for our \"Click Me!\" button. */\r\n  private _onBlur = (): void => {\r\n    this.setState({ isFocused: false })\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(MyComponent)\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}