{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Equipo\\\\OneDrive\\\\Bussines\\\\AI-CONTENT\\\\Mine\\\\app\\\\components\\\\template - card\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useElements } from '@stripe/react-stripe-js';\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\n\n// Define props para CheckoutForm para manejar la clave pública de Stripe\n//interface CheckoutFormProps {\n//  stripePublicKey: string;\n//}\n\n// Ya no necesitamos CheckoutFormProps para manejar la clave pública de Stripe\n// porque la clave se manejará en MyStripeComponent y se pasará a Elements.\n\n// Componente CheckoutForm para manejar la entrada del formulario de pago\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckoutForm = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [message, setMessage] = React.useState(\"\");\n\n  // Carga Stripe cuando stripePublicKey cambia\n  useEffect(() => {\n    if (stripePublicKey) {\n      loadStripe(stripePublicKey).then(stripeInstance => {\n        setStripe(stripeInstance);\n      });\n    }\n  }, [stripePublicKey]);\n\n  // Estilos para el CardElement y el botón\n  const cardElementStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#aab7c4\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  const formStyle = {\n    padding: \"20px\",\n    margin: \"0 auto\",\n    maxWidth: \"500px\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"5px\",\n    boxShadow: \"0 2px 3px rgba(0,0,0,0.1)\"\n  };\n  const buttonStyle = {\n    background: \"#5469d4\",\n    color: \"#ffffff\",\n    padding: \"8px 12px\",\n    border: \"none\",\n    borderRadius: \"4px\",\n    cursor: \"pointer\",\n    fontSize: \"16px\",\n    marginTop: \"20px\"\n  };\n  // Maneja la presentación del formulario\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!stripe || !elements) {\n      console.log(\"Stripe.js aún no ha cargado.\");\n      return;\n    }\n    const cardElement = elements.getElement(CardElement);\n    if (cardElement) {\n      const result = await stripe.createToken(cardElement);\n      if (result.error) {\n        console.log(result.error.message);\n        setMessage(result.error.message || \"Ocurri un error desconocido.\");\n        Streamlit.setComponentValue({\n          token: 111,\n          message: \"Pago no realizado\"\n        });\n      } else {\n        console.log(\"Token generado: \" + result.token.id);\n        setMessage(\"Pago exitoso\"); //result.token.id\n        Streamlit.setComponentValue({\n          token: 2222,\n          message: \"Pago exitoso\"\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    style: formStyle,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      options: cardElementStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      style: buttonStyle,\n      children: \"Pagar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n// Componente principal que integra el formulario en un componente de Streamlit\n_s(CheckoutForm, \"wdFJiyPI/IJoqxz368EggZO2oX0=\", true, function () {\n  return [useElements];\n});\n_c = CheckoutForm;\nclass MyStripeComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.render = () => {\n      // Recupera la clave pública de Stripe pasada desde Python a través de las props\n      const stripePublicKey = this.props.args[\"stripe_public_key\"];\n      // Inicializa Stripe aquí. `loadStripe` devuelve una promesa que resuelve a un objeto Stripe o null, lo que es aceptable para `Elements`.\n      const stripePromise = stripePublicKey ? loadStripe(stripePublicKey) : null;\n      return /*#__PURE__*/_jsxDEV(Elements, {\n        stripe: stripePromise,\n        children: /*#__PURE__*/_jsxDEV(CheckoutForm, {\n          stripePublicKey: stripePublicKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\n\n// Envuelve MyStripeComponent con withStreamlitConnection para la integración con Streamlit\nexport default _c2 = withStreamlitConnection(MyStripeComponent);\nvar _c, _c2;\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","loadStripe","Elements","CardElement","useElements","Streamlit","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","CheckoutForm","_s","stripe","useStripe","elements","message","setMessage","useState","stripePublicKey","then","stripeInstance","setStripe","cardElementStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","formStyle","padding","margin","maxWidth","border","borderRadius","boxShadow","buttonStyle","background","cursor","marginTop","handleSubmit","event","preventDefault","console","log","cardElement","getElement","result","createToken","error","setComponentValue","token","id","onSubmit","children","options","fileName","_jsxFileName","lineNumber","columnNumber","type","disabled","_c","MyStripeComponent","constructor","args","render","props","stripePromise","_c2","$RefreshReg$"],"sources":["C:/Users/Equipo/OneDrive/Bussines/AI-CONTENT/Mine/app/components/template - card/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { loadStripe, Stripe, StripeElements } from '@stripe/stripe-js';\r\nimport { Elements, CardElement, useElements } from '@stripe/react-stripe-js';\r\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\r\n\r\n// Define props para CheckoutForm para manejar la clave pública de Stripe\r\n//interface CheckoutFormProps {\r\n//  stripePublicKey: string;\r\n//}\r\n\r\n// Ya no necesitamos CheckoutFormProps para manejar la clave pública de Stripe\r\n// porque la clave se manejará en MyStripeComponent y se pasará a Elements.\r\n\r\n\r\n// Componente CheckoutForm para manejar la entrada del formulario de pago\r\nconst CheckoutForm: React.FC = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [message, setMessage] = React.useState(\"\");\r\n\r\n  // Carga Stripe cuando stripePublicKey cambia\r\n  useEffect(() => {\r\n    if (stripePublicKey) {\r\n      loadStripe(stripePublicKey).then(stripeInstance => {\r\n        setStripe(stripeInstance);\r\n      });\r\n    }\r\n  }, [stripePublicKey]);\r\n\r\n   // Estilos para el CardElement y el botón\r\n  const cardElementStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: 'Arial, sans-serif',\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": {\r\n          color: \"#aab7c4\"\r\n        },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\"\r\n      }\r\n    }\r\n  };\r\n\r\n  const formStyle = {\r\n    padding: \"20px\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"500px\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"5px\",\r\n    boxShadow: \"0 2px 3px rgba(0,0,0,0.1)\"\r\n  };\r\n\r\n  const buttonStyle = {\r\n    background: \"#5469d4\",\r\n    color: \"#ffffff\",\r\n    padding: \"8px 12px\",\r\n    border: \"none\",\r\n    borderRadius: \"4px\",\r\n    cursor: \"pointer\",\r\n    fontSize: \"16px\",\r\n    marginTop: \"20px\"\r\n  };\r\n  // Maneja la presentación del formulario\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      console.log(\"Stripe.js aún no ha cargado.\");\r\n      return;\r\n    }\r\n\r\n    const cardElement = elements.getElement(CardElement);\r\n    if (cardElement) {\r\n      const result = await stripe.createToken(cardElement);\r\n\r\n      if (result.error) {\r\n        console.log(result.error.message);\r\n        setMessage(result.error.message || \"Ocurri un error desconocido.\");\r\n        Streamlit.setComponentValue({ token: 111, message: \"Pago no realizado\" });\r\n      } else {\r\n        console.log(\"Token generado: \" + result.token.id);\r\n        setMessage(\"Pago exitoso\"); //result.token.id\r\n        Streamlit.setComponentValue({ token: 2222, message: \"Pago exitoso\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} style={formStyle}>\r\n      <CardElement options={cardElementStyle} />\r\n      <button type=\"submit\" disabled={!stripe} style={buttonStyle}>Pagar</button>\r\n      <div>{message}</div>\r\n    </form>\r\n  );\r\n};\r\n\r\n// Componente principal que integra el formulario en un componente de Streamlit\r\nclass MyStripeComponent extends StreamlitComponentBase {\r\n  public render = (): React.ReactNode => {\r\n    // Recupera la clave pública de Stripe pasada desde Python a través de las props\r\n    const stripePublicKey: string = this.props.args[\"stripe_public_key\"];\r\n    // Inicializa Stripe aquí. `loadStripe` devuelve una promesa que resuelve a un objeto Stripe o null, lo que es aceptable para `Elements`.\r\n    const stripePromise = stripePublicKey ? loadStripe(stripePublicKey) : null;\r\n    return (\r\n      <Elements stripe={stripePromise}>\r\n        <CheckoutForm stripePublicKey={stripePublicKey} />\r\n      </Elements>\r\n    );\r\n  }\r\n}\r\n\r\n// Envuelve MyStripeComponent con withStreamlitConnection para la integración con Streamlit\r\nexport default withStreamlitConnection(MyStripeComponent);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}